// <auto-generated />
using System;
using CRM.Trust.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CRM.Trust.Infrastructure.Migrations
{
    [DbContext(typeof(ScoringContext))]
    partial class ScoringContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Scoring")
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CRM.Trust.Domain.Scoring.Scoring", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Scorings", "Scoring");
                });

            modelBuilder.Entity("CRM.Trust.Domain.Scoring.ScoringOutput", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CalculateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ScoringId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("ScoringValue")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("ScoringId");

                    b.ToTable("ScoringOutputs", "Scoring");
                });

            modelBuilder.Entity("CRM.Trust.Domain.Scoring.ScoringParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(170)
                        .HasColumnType("character varying(170)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.Property<Guid>("ScoringId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ScoringId");

                    b.ToTable("ScoringParameters", "Scoring");
                });

            modelBuilder.Entity("CRM.Trust.Domain.Scoring.ScoringParameterInterval", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("MaxValue")
                        .HasColumnType("integer");

                    b.Property<int>("MinValue")
                        .HasColumnType("integer");

                    b.Property<int>("ScoringParameterId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Weight")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("ScoringParameterId");

                    b.ToTable("ScoringParameterIntervals", "Scoring");
                });

            modelBuilder.Entity("CRM.Trust.Domain.Scoring.ScoringOutput", b =>
                {
                    b.HasOne("CRM.Trust.Domain.Scoring.Scoring", "Scoring")
                        .WithMany()
                        .HasForeignKey("ScoringId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Scoring");
                });

            modelBuilder.Entity("CRM.Trust.Domain.Scoring.ScoringParameter", b =>
                {
                    b.HasOne("CRM.Trust.Domain.Scoring.Scoring", "Scoring")
                        .WithMany("ScoringParameters")
                        .HasForeignKey("ScoringId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Scoring");
                });

            modelBuilder.Entity("CRM.Trust.Domain.Scoring.ScoringParameterInterval", b =>
                {
                    b.HasOne("CRM.Trust.Domain.Scoring.ScoringParameter", "ScoringParameter")
                        .WithMany("ScoringParameterIntervals")
                        .HasForeignKey("ScoringParameterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScoringParameter");
                });

            modelBuilder.Entity("CRM.Trust.Domain.Scoring.Scoring", b =>
                {
                    b.Navigation("ScoringParameters");
                });

            modelBuilder.Entity("CRM.Trust.Domain.Scoring.ScoringParameter", b =>
                {
                    b.Navigation("ScoringParameterIntervals");
                });
#pragma warning restore 612, 618
        }
    }
}
